//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace CMSComputersMVC.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class CMSComputersEntities : DbContext
    {
        public CMSComputersEntities()
            : base("name=CMSComputersEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Bid> Bids { get; set; }
        public virtual DbSet<ContractType> ContractTypes { get; set; }
        public virtual DbSet<Customer> Customers { get; set; }
        public virtual DbSet<Employee> Employees { get; set; }
        public virtual DbSet<Invoice> Invoices { get; set; }
        public virtual DbSet<InvoiceLine> InvoiceLines { get; set; }
        public virtual DbSet<Role> Roles { get; set; }
        public virtual DbSet<RoleAssignment> RoleAssignments { get; set; }
        public virtual DbSet<status> status { get; set; }
        public virtual DbSet<Workorder> Workorders { get; set; }
        public virtual DbSet<WorkorderHour> WorkorderHours { get; set; }
        public virtual DbSet<WorkorderItem> WorkorderItems { get; set; }
    
        public virtual ObjectResult<Nullable<int>> sp_CheckPassword(string username, string password)
        {
            var usernameParameter = username != null ?
                new ObjectParameter("username", username) :
                new ObjectParameter("username", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("password", password) :
                new ObjectParameter("password", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("sp_CheckPassword", usernameParameter, passwordParameter);
        }
    
        public virtual ObjectResult<sp_GetEmployeeInfo_Result> sp_GetEmployeeInfo(string username)
        {
            var usernameParameter = username != null ?
                new ObjectParameter("username", username) :
                new ObjectParameter("username", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetEmployeeInfo_Result>("sp_GetEmployeeInfo", usernameParameter);
        }
    
        public virtual ObjectResult<string> sp_GetRoles(string username)
        {
            var usernameParameter = username != null ?
                new ObjectParameter("username", username) :
                new ObjectParameter("username", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("sp_GetRoles", usernameParameter);
        }
    
        public virtual int sp_UpdatePassword(string username, string newpassword, string oldpassword)
        {
            var usernameParameter = username != null ?
                new ObjectParameter("username", username) :
                new ObjectParameter("username", typeof(string));
    
            var newpasswordParameter = newpassword != null ?
                new ObjectParameter("newpassword", newpassword) :
                new ObjectParameter("newpassword", typeof(string));
    
            var oldpasswordParameter = oldpassword != null ?
                new ObjectParameter("oldpassword", oldpassword) :
                new ObjectParameter("oldpassword", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_UpdatePassword", usernameParameter, newpasswordParameter, oldpasswordParameter);
        }
    
        public virtual int spInsertBid(Nullable<System.DateTime> bidDate, Nullable<System.DateTime> expectedDate, Nullable<int> customerID, string description, Nullable<int> employeeID, string status, string contractType, Nullable<decimal> contractAmount, Nullable<int> partsMarkup, Nullable<decimal> hourlyRate)
        {
            var bidDateParameter = bidDate.HasValue ?
                new ObjectParameter("BidDate", bidDate) :
                new ObjectParameter("BidDate", typeof(System.DateTime));
    
            var expectedDateParameter = expectedDate.HasValue ?
                new ObjectParameter("ExpectedDate", expectedDate) :
                new ObjectParameter("ExpectedDate", typeof(System.DateTime));
    
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var employeeIDParameter = employeeID.HasValue ?
                new ObjectParameter("EmployeeID", employeeID) :
                new ObjectParameter("EmployeeID", typeof(int));
    
            var statusParameter = status != null ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(string));
    
            var contractTypeParameter = contractType != null ?
                new ObjectParameter("ContractType", contractType) :
                new ObjectParameter("ContractType", typeof(string));
    
            var contractAmountParameter = contractAmount.HasValue ?
                new ObjectParameter("ContractAmount", contractAmount) :
                new ObjectParameter("ContractAmount", typeof(decimal));
    
            var partsMarkupParameter = partsMarkup.HasValue ?
                new ObjectParameter("PartsMarkup", partsMarkup) :
                new ObjectParameter("PartsMarkup", typeof(int));
    
            var hourlyRateParameter = hourlyRate.HasValue ?
                new ObjectParameter("HourlyRate", hourlyRate) :
                new ObjectParameter("HourlyRate", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spInsertBid", bidDateParameter, expectedDateParameter, customerIDParameter, descriptionParameter, employeeIDParameter, statusParameter, contractTypeParameter, contractAmountParameter, partsMarkupParameter, hourlyRateParameter);
        }
    
        public virtual int spInsertCustomer(string firstName, string lastName, string businessName, string address, string city, string state, string zip, string localPhone, string emailAddress, Nullable<bool> active)
        {
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("LastName", lastName) :
                new ObjectParameter("LastName", typeof(string));
    
            var businessNameParameter = businessName != null ?
                new ObjectParameter("BusinessName", businessName) :
                new ObjectParameter("BusinessName", typeof(string));
    
            var addressParameter = address != null ?
                new ObjectParameter("Address", address) :
                new ObjectParameter("Address", typeof(string));
    
            var cityParameter = city != null ?
                new ObjectParameter("City", city) :
                new ObjectParameter("City", typeof(string));
    
            var stateParameter = state != null ?
                new ObjectParameter("State", state) :
                new ObjectParameter("State", typeof(string));
    
            var zipParameter = zip != null ?
                new ObjectParameter("Zip", zip) :
                new ObjectParameter("Zip", typeof(string));
    
            var localPhoneParameter = localPhone != null ?
                new ObjectParameter("LocalPhone", localPhone) :
                new ObjectParameter("LocalPhone", typeof(string));
    
            var emailAddressParameter = emailAddress != null ?
                new ObjectParameter("EmailAddress", emailAddress) :
                new ObjectParameter("EmailAddress", typeof(string));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spInsertCustomer", firstNameParameter, lastNameParameter, businessNameParameter, addressParameter, cityParameter, stateParameter, zipParameter, localPhoneParameter, emailAddressParameter, activeParameter);
        }
    
        public virtual int spInsertEmployee(string firstname, string lastName, string localPhone, string emailAddress, string username, string password)
        {
            var firstnameParameter = firstname != null ?
                new ObjectParameter("firstname", firstname) :
                new ObjectParameter("firstname", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("LastName", lastName) :
                new ObjectParameter("LastName", typeof(string));
    
            var localPhoneParameter = localPhone != null ?
                new ObjectParameter("LocalPhone", localPhone) :
                new ObjectParameter("LocalPhone", typeof(string));
    
            var emailAddressParameter = emailAddress != null ?
                new ObjectParameter("EmailAddress", emailAddress) :
                new ObjectParameter("EmailAddress", typeof(string));
    
            var usernameParameter = username != null ?
                new ObjectParameter("username", username) :
                new ObjectParameter("username", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spInsertEmployee", firstnameParameter, lastNameParameter, localPhoneParameter, emailAddressParameter, usernameParameter, passwordParameter);
        }
    
        public virtual int spInsertWorkorder(Nullable<System.DateTime> workorderDate, Nullable<int> bidID, Nullable<System.DateTime> expectedDate, Nullable<int> customerID, string description, Nullable<int> employeeID, string workorderStatus, string contractType, Nullable<decimal> contractAmount, Nullable<int> partsMarkup, Nullable<decimal> hourlyRate)
        {
            var workorderDateParameter = workorderDate.HasValue ?
                new ObjectParameter("WorkorderDate", workorderDate) :
                new ObjectParameter("WorkorderDate", typeof(System.DateTime));
    
            var bidIDParameter = bidID.HasValue ?
                new ObjectParameter("BidID", bidID) :
                new ObjectParameter("BidID", typeof(int));
    
            var expectedDateParameter = expectedDate.HasValue ?
                new ObjectParameter("ExpectedDate", expectedDate) :
                new ObjectParameter("ExpectedDate", typeof(System.DateTime));
    
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var employeeIDParameter = employeeID.HasValue ?
                new ObjectParameter("EmployeeID", employeeID) :
                new ObjectParameter("EmployeeID", typeof(int));
    
            var workorderStatusParameter = workorderStatus != null ?
                new ObjectParameter("WorkorderStatus", workorderStatus) :
                new ObjectParameter("WorkorderStatus", typeof(string));
    
            var contractTypeParameter = contractType != null ?
                new ObjectParameter("ContractType", contractType) :
                new ObjectParameter("ContractType", typeof(string));
    
            var contractAmountParameter = contractAmount.HasValue ?
                new ObjectParameter("ContractAmount", contractAmount) :
                new ObjectParameter("ContractAmount", typeof(decimal));
    
            var partsMarkupParameter = partsMarkup.HasValue ?
                new ObjectParameter("PartsMarkup", partsMarkup) :
                new ObjectParameter("PartsMarkup", typeof(int));
    
            var hourlyRateParameter = hourlyRate.HasValue ?
                new ObjectParameter("HourlyRate", hourlyRate) :
                new ObjectParameter("HourlyRate", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spInsertWorkorder", workorderDateParameter, bidIDParameter, expectedDateParameter, customerIDParameter, descriptionParameter, employeeIDParameter, workorderStatusParameter, contractTypeParameter, contractAmountParameter, partsMarkupParameter, hourlyRateParameter);
        }
    
        public virtual int spUpdateBid(Nullable<int> bidID, Nullable<System.DateTime> bidDate, Nullable<System.DateTime> expectedDate, Nullable<int> customerID, string description, Nullable<int> employeeID, string status, string contractType, Nullable<decimal> contractAmount, Nullable<int> partsMarkup, Nullable<decimal> hourlyRate, Nullable<System.DateTime> original_BidDate, Nullable<System.DateTime> original_ExpectedDate, Nullable<int> original_CustomerID, string original_Description, Nullable<int> original_EmployeeID, string original_Status, string original_ContractType, Nullable<decimal> original_ContractAmount, Nullable<int> original_PartsMarkup, Nullable<decimal> original_HourlyRate)
        {
            var bidIDParameter = bidID.HasValue ?
                new ObjectParameter("bidID", bidID) :
                new ObjectParameter("bidID", typeof(int));
    
            var bidDateParameter = bidDate.HasValue ?
                new ObjectParameter("BidDate", bidDate) :
                new ObjectParameter("BidDate", typeof(System.DateTime));
    
            var expectedDateParameter = expectedDate.HasValue ?
                new ObjectParameter("ExpectedDate", expectedDate) :
                new ObjectParameter("ExpectedDate", typeof(System.DateTime));
    
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var employeeIDParameter = employeeID.HasValue ?
                new ObjectParameter("EmployeeID", employeeID) :
                new ObjectParameter("EmployeeID", typeof(int));
    
            var statusParameter = status != null ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(string));
    
            var contractTypeParameter = contractType != null ?
                new ObjectParameter("ContractType", contractType) :
                new ObjectParameter("ContractType", typeof(string));
    
            var contractAmountParameter = contractAmount.HasValue ?
                new ObjectParameter("ContractAmount", contractAmount) :
                new ObjectParameter("ContractAmount", typeof(decimal));
    
            var partsMarkupParameter = partsMarkup.HasValue ?
                new ObjectParameter("PartsMarkup", partsMarkup) :
                new ObjectParameter("PartsMarkup", typeof(int));
    
            var hourlyRateParameter = hourlyRate.HasValue ?
                new ObjectParameter("HourlyRate", hourlyRate) :
                new ObjectParameter("HourlyRate", typeof(decimal));
    
            var original_BidDateParameter = original_BidDate.HasValue ?
                new ObjectParameter("Original_BidDate", original_BidDate) :
                new ObjectParameter("Original_BidDate", typeof(System.DateTime));
    
            var original_ExpectedDateParameter = original_ExpectedDate.HasValue ?
                new ObjectParameter("Original_ExpectedDate", original_ExpectedDate) :
                new ObjectParameter("Original_ExpectedDate", typeof(System.DateTime));
    
            var original_CustomerIDParameter = original_CustomerID.HasValue ?
                new ObjectParameter("Original_CustomerID", original_CustomerID) :
                new ObjectParameter("Original_CustomerID", typeof(int));
    
            var original_DescriptionParameter = original_Description != null ?
                new ObjectParameter("Original_Description", original_Description) :
                new ObjectParameter("Original_Description", typeof(string));
    
            var original_EmployeeIDParameter = original_EmployeeID.HasValue ?
                new ObjectParameter("Original_EmployeeID", original_EmployeeID) :
                new ObjectParameter("Original_EmployeeID", typeof(int));
    
            var original_StatusParameter = original_Status != null ?
                new ObjectParameter("Original_Status", original_Status) :
                new ObjectParameter("Original_Status", typeof(string));
    
            var original_ContractTypeParameter = original_ContractType != null ?
                new ObjectParameter("Original_ContractType", original_ContractType) :
                new ObjectParameter("Original_ContractType", typeof(string));
    
            var original_ContractAmountParameter = original_ContractAmount.HasValue ?
                new ObjectParameter("Original_ContractAmount", original_ContractAmount) :
                new ObjectParameter("Original_ContractAmount", typeof(decimal));
    
            var original_PartsMarkupParameter = original_PartsMarkup.HasValue ?
                new ObjectParameter("Original_PartsMarkup", original_PartsMarkup) :
                new ObjectParameter("Original_PartsMarkup", typeof(int));
    
            var original_HourlyRateParameter = original_HourlyRate.HasValue ?
                new ObjectParameter("Original_HourlyRate", original_HourlyRate) :
                new ObjectParameter("Original_HourlyRate", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spUpdateBid", bidIDParameter, bidDateParameter, expectedDateParameter, customerIDParameter, descriptionParameter, employeeIDParameter, statusParameter, contractTypeParameter, contractAmountParameter, partsMarkupParameter, hourlyRateParameter, original_BidDateParameter, original_ExpectedDateParameter, original_CustomerIDParameter, original_DescriptionParameter, original_EmployeeIDParameter, original_StatusParameter, original_ContractTypeParameter, original_ContractAmountParameter, original_PartsMarkupParameter, original_HourlyRateParameter);
        }
    
        public virtual int spUpdateBidStatus(Nullable<int> bidID, string status)
        {
            var bidIDParameter = bidID.HasValue ?
                new ObjectParameter("bidID", bidID) :
                new ObjectParameter("bidID", typeof(int));
    
            var statusParameter = status != null ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spUpdateBidStatus", bidIDParameter, statusParameter);
        }
    
        public virtual int spUpdateCustomer(Nullable<int> customerID, string firstName, string lastName, string businessName, string address, string city, string state, string zip, string localPhone, Nullable<bool> active, string emailAddress, string original_FirstName, string original_LastName, string original_BusinessName, string original_Address, string original_City, string original_State, string original_Zip, string original_LocalPhone, string original_EmailAddress, Nullable<bool> original_Active)
        {
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("LastName", lastName) :
                new ObjectParameter("LastName", typeof(string));
    
            var businessNameParameter = businessName != null ?
                new ObjectParameter("BusinessName", businessName) :
                new ObjectParameter("BusinessName", typeof(string));
    
            var addressParameter = address != null ?
                new ObjectParameter("Address", address) :
                new ObjectParameter("Address", typeof(string));
    
            var cityParameter = city != null ?
                new ObjectParameter("City", city) :
                new ObjectParameter("City", typeof(string));
    
            var stateParameter = state != null ?
                new ObjectParameter("State", state) :
                new ObjectParameter("State", typeof(string));
    
            var zipParameter = zip != null ?
                new ObjectParameter("Zip", zip) :
                new ObjectParameter("Zip", typeof(string));
    
            var localPhoneParameter = localPhone != null ?
                new ObjectParameter("LocalPhone", localPhone) :
                new ObjectParameter("LocalPhone", typeof(string));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(bool));
    
            var emailAddressParameter = emailAddress != null ?
                new ObjectParameter("EmailAddress", emailAddress) :
                new ObjectParameter("EmailAddress", typeof(string));
    
            var original_FirstNameParameter = original_FirstName != null ?
                new ObjectParameter("original_FirstName", original_FirstName) :
                new ObjectParameter("original_FirstName", typeof(string));
    
            var original_LastNameParameter = original_LastName != null ?
                new ObjectParameter("original_LastName", original_LastName) :
                new ObjectParameter("original_LastName", typeof(string));
    
            var original_BusinessNameParameter = original_BusinessName != null ?
                new ObjectParameter("original_BusinessName", original_BusinessName) :
                new ObjectParameter("original_BusinessName", typeof(string));
    
            var original_AddressParameter = original_Address != null ?
                new ObjectParameter("original_Address", original_Address) :
                new ObjectParameter("original_Address", typeof(string));
    
            var original_CityParameter = original_City != null ?
                new ObjectParameter("original_City", original_City) :
                new ObjectParameter("original_City", typeof(string));
    
            var original_StateParameter = original_State != null ?
                new ObjectParameter("original_State", original_State) :
                new ObjectParameter("original_State", typeof(string));
    
            var original_ZipParameter = original_Zip != null ?
                new ObjectParameter("original_Zip", original_Zip) :
                new ObjectParameter("original_Zip", typeof(string));
    
            var original_LocalPhoneParameter = original_LocalPhone != null ?
                new ObjectParameter("original_LocalPhone", original_LocalPhone) :
                new ObjectParameter("original_LocalPhone", typeof(string));
    
            var original_EmailAddressParameter = original_EmailAddress != null ?
                new ObjectParameter("original_EmailAddress", original_EmailAddress) :
                new ObjectParameter("original_EmailAddress", typeof(string));
    
            var original_ActiveParameter = original_Active.HasValue ?
                new ObjectParameter("original_Active", original_Active) :
                new ObjectParameter("original_Active", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spUpdateCustomer", customerIDParameter, firstNameParameter, lastNameParameter, businessNameParameter, addressParameter, cityParameter, stateParameter, zipParameter, localPhoneParameter, activeParameter, emailAddressParameter, original_FirstNameParameter, original_LastNameParameter, original_BusinessNameParameter, original_AddressParameter, original_CityParameter, original_StateParameter, original_ZipParameter, original_LocalPhoneParameter, original_EmailAddressParameter, original_ActiveParameter);
        }
    
        public virtual int spUpdateEmployee(Nullable<int> employeeID, string firstname, string lastName, string localPhone, string emailAddress, string username, string password, Nullable<bool> active, string original_firstname, string original_LastName, string original_LocalPhone, string original_EmailAddress, string original_username, string original_Password, Nullable<bool> original_active)
        {
            var employeeIDParameter = employeeID.HasValue ?
                new ObjectParameter("EmployeeID", employeeID) :
                new ObjectParameter("EmployeeID", typeof(int));
    
            var firstnameParameter = firstname != null ?
                new ObjectParameter("firstname", firstname) :
                new ObjectParameter("firstname", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("LastName", lastName) :
                new ObjectParameter("LastName", typeof(string));
    
            var localPhoneParameter = localPhone != null ?
                new ObjectParameter("LocalPhone", localPhone) :
                new ObjectParameter("LocalPhone", typeof(string));
    
            var emailAddressParameter = emailAddress != null ?
                new ObjectParameter("EmailAddress", emailAddress) :
                new ObjectParameter("EmailAddress", typeof(string));
    
            var usernameParameter = username != null ?
                new ObjectParameter("username", username) :
                new ObjectParameter("username", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("active", active) :
                new ObjectParameter("active", typeof(bool));
    
            var original_firstnameParameter = original_firstname != null ?
                new ObjectParameter("original_firstname", original_firstname) :
                new ObjectParameter("original_firstname", typeof(string));
    
            var original_LastNameParameter = original_LastName != null ?
                new ObjectParameter("original_LastName", original_LastName) :
                new ObjectParameter("original_LastName", typeof(string));
    
            var original_LocalPhoneParameter = original_LocalPhone != null ?
                new ObjectParameter("original_LocalPhone", original_LocalPhone) :
                new ObjectParameter("original_LocalPhone", typeof(string));
    
            var original_EmailAddressParameter = original_EmailAddress != null ?
                new ObjectParameter("original_EmailAddress", original_EmailAddress) :
                new ObjectParameter("original_EmailAddress", typeof(string));
    
            var original_usernameParameter = original_username != null ?
                new ObjectParameter("original_username", original_username) :
                new ObjectParameter("original_username", typeof(string));
    
            var original_PasswordParameter = original_Password != null ?
                new ObjectParameter("original_Password", original_Password) :
                new ObjectParameter("original_Password", typeof(string));
    
            var original_activeParameter = original_active.HasValue ?
                new ObjectParameter("original_active", original_active) :
                new ObjectParameter("original_active", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spUpdateEmployee", employeeIDParameter, firstnameParameter, lastNameParameter, localPhoneParameter, emailAddressParameter, usernameParameter, passwordParameter, activeParameter, original_firstnameParameter, original_LastNameParameter, original_LocalPhoneParameter, original_EmailAddressParameter, original_usernameParameter, original_PasswordParameter, original_activeParameter);
        }
    
        public virtual int spUpdateWorkorder(Nullable<int> workorderID, Nullable<System.DateTime> workorderdate, Nullable<int> bidID, Nullable<System.DateTime> expectedDate, Nullable<int> customerID, string description, Nullable<int> employeeID, string workorderstatus, string contractType, Nullable<decimal> contractAmount, Nullable<int> partsMarkup, Nullable<decimal> hourlyRate, Nullable<System.DateTime> original_workorderdate, Nullable<int> original_bidID, Nullable<System.DateTime> original_ExpectedDate, Nullable<int> original_CustomerID, string original_Description, Nullable<int> original_EmployeeID, string original_workorderstatus, string original_ContractType, Nullable<decimal> original_ContractAmount, Nullable<int> original_PartsMarkup, Nullable<decimal> original_HourlyRate)
        {
            var workorderIDParameter = workorderID.HasValue ?
                new ObjectParameter("workorderID", workorderID) :
                new ObjectParameter("workorderID", typeof(int));
    
            var workorderdateParameter = workorderdate.HasValue ?
                new ObjectParameter("workorderdate", workorderdate) :
                new ObjectParameter("workorderdate", typeof(System.DateTime));
    
            var bidIDParameter = bidID.HasValue ?
                new ObjectParameter("bidID", bidID) :
                new ObjectParameter("bidID", typeof(int));
    
            var expectedDateParameter = expectedDate.HasValue ?
                new ObjectParameter("ExpectedDate", expectedDate) :
                new ObjectParameter("ExpectedDate", typeof(System.DateTime));
    
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var employeeIDParameter = employeeID.HasValue ?
                new ObjectParameter("EmployeeID", employeeID) :
                new ObjectParameter("EmployeeID", typeof(int));
    
            var workorderstatusParameter = workorderstatus != null ?
                new ObjectParameter("workorderstatus", workorderstatus) :
                new ObjectParameter("workorderstatus", typeof(string));
    
            var contractTypeParameter = contractType != null ?
                new ObjectParameter("ContractType", contractType) :
                new ObjectParameter("ContractType", typeof(string));
    
            var contractAmountParameter = contractAmount.HasValue ?
                new ObjectParameter("ContractAmount", contractAmount) :
                new ObjectParameter("ContractAmount", typeof(decimal));
    
            var partsMarkupParameter = partsMarkup.HasValue ?
                new ObjectParameter("PartsMarkup", partsMarkup) :
                new ObjectParameter("PartsMarkup", typeof(int));
    
            var hourlyRateParameter = hourlyRate.HasValue ?
                new ObjectParameter("HourlyRate", hourlyRate) :
                new ObjectParameter("HourlyRate", typeof(decimal));
    
            var original_workorderdateParameter = original_workorderdate.HasValue ?
                new ObjectParameter("Original_workorderdate", original_workorderdate) :
                new ObjectParameter("Original_workorderdate", typeof(System.DateTime));
    
            var original_bidIDParameter = original_bidID.HasValue ?
                new ObjectParameter("Original_bidID", original_bidID) :
                new ObjectParameter("Original_bidID", typeof(int));
    
            var original_ExpectedDateParameter = original_ExpectedDate.HasValue ?
                new ObjectParameter("Original_ExpectedDate", original_ExpectedDate) :
                new ObjectParameter("Original_ExpectedDate", typeof(System.DateTime));
    
            var original_CustomerIDParameter = original_CustomerID.HasValue ?
                new ObjectParameter("Original_CustomerID", original_CustomerID) :
                new ObjectParameter("Original_CustomerID", typeof(int));
    
            var original_DescriptionParameter = original_Description != null ?
                new ObjectParameter("Original_Description", original_Description) :
                new ObjectParameter("Original_Description", typeof(string));
    
            var original_EmployeeIDParameter = original_EmployeeID.HasValue ?
                new ObjectParameter("Original_EmployeeID", original_EmployeeID) :
                new ObjectParameter("Original_EmployeeID", typeof(int));
    
            var original_workorderstatusParameter = original_workorderstatus != null ?
                new ObjectParameter("Original_workorderstatus", original_workorderstatus) :
                new ObjectParameter("Original_workorderstatus", typeof(string));
    
            var original_ContractTypeParameter = original_ContractType != null ?
                new ObjectParameter("Original_ContractType", original_ContractType) :
                new ObjectParameter("Original_ContractType", typeof(string));
    
            var original_ContractAmountParameter = original_ContractAmount.HasValue ?
                new ObjectParameter("Original_ContractAmount", original_ContractAmount) :
                new ObjectParameter("Original_ContractAmount", typeof(decimal));
    
            var original_PartsMarkupParameter = original_PartsMarkup.HasValue ?
                new ObjectParameter("Original_PartsMarkup", original_PartsMarkup) :
                new ObjectParameter("Original_PartsMarkup", typeof(int));
    
            var original_HourlyRateParameter = original_HourlyRate.HasValue ?
                new ObjectParameter("Original_HourlyRate", original_HourlyRate) :
                new ObjectParameter("Original_HourlyRate", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spUpdateWorkorder", workorderIDParameter, workorderdateParameter, bidIDParameter, expectedDateParameter, customerIDParameter, descriptionParameter, employeeIDParameter, workorderstatusParameter, contractTypeParameter, contractAmountParameter, partsMarkupParameter, hourlyRateParameter, original_workorderdateParameter, original_bidIDParameter, original_ExpectedDateParameter, original_CustomerIDParameter, original_DescriptionParameter, original_EmployeeIDParameter, original_workorderstatusParameter, original_ContractTypeParameter, original_ContractAmountParameter, original_PartsMarkupParameter, original_HourlyRateParameter);
        }
    }
}
